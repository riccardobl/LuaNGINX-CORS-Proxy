# Installation
# luarocks install yaml
# luarocks install lrexlib-POSIX
# ./letsencrypt-auto certonly --manual

#  ## EDIT ME ##
limit_req_zone $binary_remote_addr zone=CorsProxyZone:10m rate=5r/s;
# ## ## ## ## ##

server{   
    #  ## EDIT ME ##
    listen 80;
    listen 443 ssl;
    server_name              cors-gate-for-the-internette.frk.wf;
    set $_SETTINGS_PATH      /home/WWW/corsproxy/settings.yml;
    set $_HTML_ROOT          /home/WWW/corsproxy/html/;   
    ssl_certificate          /etc/letsencrypt/live/cors-gate-for-the-internette.frk.wf/fullchain.pem;
    ssl_certificate_key      /etc/letsencrypt/live/cors-gate-for-the-internette.frk.wf/privkey.pem; 
    ssl_trusted_certificate  /etc/letsencrypt/live/cors-gate-for-the-internette.frk.wf/fullchain.pem;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout         5s;
    error_page               403 = /403.html;
    # ## ## ## ## ##
       
        
    ssl_session_timeout 5m;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off; # Requires nginx >= 1.5.9
    ssl_stapling on; # Requires nginx >= 1.3.7
    ssl_stapling_verify on; # Requires nginx => 1.3.7  
    
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    
    underscores_in_headers on;
    
    location / {
        root $_HTML_ROOT;
        index index.html index.htm index.txt;
    }

    location ~^/(http?[:!]\/?\/?.+)$ {
        #  ## EDIT ME ##
        limit_rate 50k;
        client_max_body_size 1m;
        limit_req zone=CorsProxyZone burst=10;
        # ## ## ## ## ##

        default_type "text/html";        
        set $target_proto "";
        set $target_url "";
        set $target_host "";
        rewrite_by_lua  '
            local _SETTINGS_PATH=ngx.var._SETTINGS_PATH
            local Regex=require "rex_posix"
            local Yaml=require "yaml"
            local settings_io = io.open(_SETTINGS_PATH, "rb")
            local SETTINGS=Yaml.load(settings_io:read("*all"))
            settings_io:close();

            ngx.req.read_body()
            local GET, err_get = ngx.req.get_uri_args()
            local POST, err_post = ngx.req.get_post_args()  
            local IP = ngx.var.remote_addr
            local scheme,turl = Regex.match(ngx.var.uri,"^\\\\/(https?)[!:]\\\\/?\\\\/?([^$]+)")

            if scheme==nil or turl==nil then ngx.exit(ngx.HTTP_FORBIDDEN) end

            local TARGET_URL=scheme.."://"..turl

            function isInWhitelist(things,whitelist_name,nokey)
                local whitelist = SETTINGS["whitelists"][whitelist_name]
                for k,v in pairs(things) do
                local entry=nil;       
                if nokey then
                    entry=v
                else
                    entry=k.."="..v
                end   
                
                local found=false
                for k,whitelist_entry in pairs(whitelist) do
                    if Regex.match(entry, whitelist_entry)~=nil then
                        found=true
                        break
                        end            
                    end        
                    if not found then
                        return false
                    end
                end
                return true
            end

            local success=true
            if not isInWhitelist({IP},"user_ip",true) or not isInWhitelist({TARGET_URL},"target_url",true) or not isInWhitelist(POST,"post",false) or not isInWhitelist(GET,"get",false) then
                success=false
            end

            if SETTINGS["logger"] ~= nil and SETTINGS["logger"]~="" then
                local logger = assert (loadfile (SETTINGS["logger"]))   
                logger()
                log(success,GET,POST,IP,TARGET_URL)    
            end

            if not success then ngx.exit(ngx.HTTP_FORBIDDEN) end
            ngx.var.target_url = TARGET_URL
            ngx.var.target_host = Regex.match(TARGET_URL,"^https?:\\\\/\\\\/([^/$]+)")
            ngx.var.target_proto=scheme
        ';
 
       
        proxy_set_header            "Host" $target_host;
        proxy_set_header            "Cookie" "";
        proxy_set_header            "X-Forwarded-Proto" $scheme;
        proxy_set_header            "X-Forwarded-For" $proxy_add_x_forwarded_for;
        proxy_set_header            "X-Real-IP" $remote_addr;
        proxy_connect_timeout       10;
        proxy_send_timeout          30;
        proxy_read_timeout          30;        
        proxy_pass                  $target_url$is_args$args;
        proxy_ssl_session_reuse     off;
        proxy_ssl_ciphers           "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        proxy_ssl_protocols         TLSv1 TLSv1.1 TLSv1.2;
        proxy_cookie_domain         off;
        proxy_redirect              $target_proto://$target_host/ $scheme://$server_name:$server_port/$target_proto!$target_host/;
        proxy_intercept_errors      off;
        add_header                  "Access-Control-Allow-Origin" "*" always;

  
  }
}

